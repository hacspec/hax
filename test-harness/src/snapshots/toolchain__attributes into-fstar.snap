---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: fstar
  info:
    name: attributes
    manifest: attributes/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: false
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0

[stdout]
diagnostics = []

[stdout.files]
"Attributes.Ensures_on_arity_zero_fns.fst" = '''
module Attributes.Ensures_on_arity_zero_fns
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let doing_nothing (_: Prims.unit)
    : Prims.Pure Prims.unit
      (requires true)
      (ensures
        fun e_x ->
          let e_x:Prims.unit = e_x in
          true) = ()

let basically_a_constant (_: Prims.unit)
    : Prims.Pure u8
      (requires true)
      (ensures
        fun x ->
          let x:u8 = x in
          x >. mk_u8 100) = mk_u8 127
'''
"Attributes.Inlined_code_ensures_requires.fst" = '''
module Attributes.Inlined_code_ensures_requires
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let increment_array (v: t_Array u8 (mk_usize 4))
    : Prims.Pure (t_Array u8 (mk_usize 4))
      (requires forall i. FStar.Seq.index v i <. mk_u8 254)
      (ensures
        fun vv_future ->
          let vv_future:t_Array u8 (mk_usize 4) = vv_future in
          let future_v:t_Array u8 (mk_usize 4) = vv_future in
          forall i. FStar.Seq.index future_v i >. mk_u8 0) =
  let v:t_Array u8 (mk_usize 4) =
    Rust_primitives.Hax.Monomorphized_update_at.update_at_usize v
      (mk_usize 0)
      ((v.[ mk_usize 0 ] <: u8) +! mk_u8 1 <: u8)
  in
  let v:t_Array u8 (mk_usize 4) =
    Rust_primitives.Hax.Monomorphized_update_at.update_at_usize v
      (mk_usize 1)
      ((v.[ mk_usize 1 ] <: u8) +! mk_u8 1 <: u8)
  in
  let v:t_Array u8 (mk_usize 4) =
    Rust_primitives.Hax.Monomorphized_update_at.update_at_usize v
      (mk_usize 2)
      ((v.[ mk_usize 2 ] <: u8) +! mk_u8 1 <: u8)
  in
  let v:t_Array u8 (mk_usize 4) =
    Rust_primitives.Hax.Monomorphized_update_at.update_at_usize v
      (mk_usize 3)
      ((v.[ mk_usize 3 ] <: u8) +! mk_u8 1 <: u8)
  in
  v
'''
"Attributes.Int_model.fst" = '''
module Attributes.Int_model
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

unfold type t_Int = int

[@@ FStar.Tactics.Typeclasses.tcinstance]
assume
val impl_1': Core.Clone.t_Clone t_Int

let impl_1 = impl_1'

[@@ FStar.Tactics.Typeclasses.tcinstance]
assume
val impl': Core.Marker.t_Copy t_Int

let impl = impl'

unfold let add x y = x + y

unfold instance impl: Core.Ops.Arith.t_Sub t_Int t_Int =
  {
    f_Output = t_Int;
    f_sub_pre = (fun (self: t_Int) (other: t_Int) -> true);
    f_sub_post = (fun (self: t_Int) (other: t_Int) (out: t_Int) -> true);
    f_sub = fun (self: t_Int) (other: t_Int) -> self + other
  }
'''
"Attributes.Issue_1266_.fst" = '''
module Attributes.Issue_1266_
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

class t_T (v_Self: Type0) = {
  f_v_pre:v_Self -> Type0;
  f_v_post:x: v_Self -> x_future: v_Self -> pred: Type0{pred ==> true};
  f_v:x0: v_Self -> Prims.Pure v_Self (f_v_pre x0) (fun result -> f_v_post x0 result)
}
'''
"Attributes.Nested_refinement_elim.fst" = '''
module Attributes.Nested_refinement_elim
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let t_DummyRefinement = x: u16{true}

let elim_twice (x: t_DummyRefinement) : u16 = ((x <: u16) <: t_DummyRefinement) <: u16
'''
"Attributes.Newtype_pattern.fst" = '''
module Attributes.Newtype_pattern
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let v_MAX: usize = mk_usize 10

type t_SafeIndex = { f_i:f_i: usize{b2t (f_i <. v_MAX <: bool)} }

let impl_SafeIndex__new (i: usize) : Core.Option.t_Option t_SafeIndex =
  if i <. v_MAX
  then Core.Option.Option_Some ({ f_i = i } <: t_SafeIndex) <: Core.Option.t_Option t_SafeIndex
  else Core.Option.Option_None <: Core.Option.t_Option t_SafeIndex

let impl_SafeIndex__as_usize (self: t_SafeIndex) : usize = self.f_i

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl_1 (#v_T: Type0) : Core.Ops.Index.t_Index (t_Array v_T (mk_usize 10)) t_SafeIndex =
  {
    f_Output = v_T;
    f_index_pre = (fun (self: t_Array v_T (mk_usize 10)) (index: t_SafeIndex) -> true);
    f_index_post = (fun (self: t_Array v_T (mk_usize 10)) (index: t_SafeIndex) (out: v_T) -> true);
    f_index = fun (self: t_Array v_T (mk_usize 10)) (index: t_SafeIndex) -> self.[ index.f_i ]
  }
'''
"Attributes.Pre_post_on_traits_and_impls.fst" = '''
module Attributes.Pre_post_on_traits_and_impls
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

class t_Operation (v_Self: Type0) = {
  f_double_pre:x: u8
    -> pred:
      Type0
        { (Rust_primitives.Hax.Int.from_machine x <: Hax_lib.Int.t_Int) <=
          (127 <: Hax_lib.Int.t_Int) ==>
          pred };
  f_double_post:x: u8 -> result: u8
    -> pred:
      Type0
        { pred ==>
          ((Rust_primitives.Hax.Int.from_machine x <: Hax_lib.Int.t_Int) * (2 <: Hax_lib.Int.t_Int)
            <:
            Hax_lib.Int.t_Int) =
          (Rust_primitives.Hax.Int.from_machine result <: Hax_lib.Int.t_Int) };
  f_double:x0: u8 -> Prims.Pure u8 (f_double_pre x0) (fun result -> f_double_post x0 result)
}

type t_ViaAdd = | ViaAdd : t_ViaAdd

type t_ViaMul = | ViaMul : t_ViaMul

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl: t_Operation t_ViaAdd =
  {
    f_double_pre
    =
    (fun (x: u8) ->
        (Rust_primitives.Hax.Int.from_machine x <: Hax_lib.Int.t_Int) <= (127 <: Hax_lib.Int.t_Int));
    f_double_post
    =
    (fun (x: u8) (result: u8) ->
        ((Rust_primitives.Hax.Int.from_machine x <: Hax_lib.Int.t_Int) * (2 <: Hax_lib.Int.t_Int)
          <:
          Hax_lib.Int.t_Int) =
        (Rust_primitives.Hax.Int.from_machine result <: Hax_lib.Int.t_Int));
    f_double = fun (x: u8) -> x +! x
  }

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl_Operation_for_ViaMul: t_Operation t_ViaMul =
  {
    f_double_pre
    =
    (fun (x: u8) ->
        (Rust_primitives.Hax.Int.from_machine x <: Hax_lib.Int.t_Int) <= (127 <: Hax_lib.Int.t_Int));
    f_double_post
    =
    (fun (x: u8) (result: u8) ->
        ((Rust_primitives.Hax.Int.from_machine x <: Hax_lib.Int.t_Int) * (2 <: Hax_lib.Int.t_Int)
          <:
          Hax_lib.Int.t_Int) =
        (Rust_primitives.Hax.Int.from_machine result <: Hax_lib.Int.t_Int));
    f_double = fun (x: u8) -> x *! mk_u8 2
  }

class t_TraitWithRequiresAndEnsures (v_Self: Type0) = {
  f_method_pre:self_: v_Self -> x: u8 -> pred: Type0{x <. mk_u8 100 ==> pred};
  f_method_post:self_: v_Self -> x: u8 -> r: u8 -> pred: Type0{pred ==> r >. mk_u8 88};
  f_method:x0: v_Self -> x1: u8
    -> Prims.Pure u8 (f_method_pre x0 x1) (fun result -> f_method_post x0 x1 result)
}

let test
      (#v_T: Type0)
      (#[FStar.Tactics.Typeclasses.tcresolve ()] i1: t_TraitWithRequiresAndEnsures v_T)
      (x: v_T)
    : u8 = (f_method #v_T #FStar.Tactics.Typeclasses.solve x (mk_u8 99) <: u8) -! mk_u8 88
'''
"Attributes.Props.fst" = '''
module Attributes.Props
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let f (x: Hax_lib.Prop.t_Prop) (y: bool) : Hax_lib.Prop.t_Prop =
  let (xprop: Hax_lib.Prop.t_Prop):Hax_lib.Prop.t_Prop = b2t y in
  let p:Hax_lib.Prop.t_Prop = b2t y /\ xprop /\ b2t y /\ b2t y in
  ~(p \/ b2t y ==>
    (forall (x: u8). b2t (x <=. Core.Num.impl_u8__MAX <: bool)) /\
    (exists (x: u16). b2t (x >. mk_u16 300 <: bool)))
'''
"Attributes.Refined_arithmetic.fst" = '''
module Attributes.Refined_arithmetic
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

type t_Foo = | Foo : u8 -> t_Foo

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl: Core.Ops.Arith.t_Add t_Foo t_Foo =
  {
    f_Output = t_Foo;
    f_add_pre = (fun (self_: t_Foo) (rhs: t_Foo) -> self_._0 <. (mk_u8 255 -! rhs._0 <: u8));
    f_add_post = (fun (self: t_Foo) (rhs: t_Foo) (out: t_Foo) -> true);
    f_add = fun (self: t_Foo) (rhs: t_Foo) -> Foo (self._0 +! rhs._0) <: t_Foo
  }

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl_1: Core.Ops.Arith.t_Mul t_Foo t_Foo =
  {
    f_Output = t_Foo;
    f_mul_pre
    =
    (fun (self_: t_Foo) (rhs: t_Foo) -> rhs._0 =. mk_u8 0 || self_._0 <. (mk_u8 255 /! rhs._0 <: u8)
    );
    f_mul_post = (fun (self: t_Foo) (rhs: t_Foo) (out: t_Foo) -> true);
    f_mul = fun (self: t_Foo) (rhs: t_Foo) -> Foo (self._0 *! rhs._0) <: t_Foo
  }
'''
"Attributes.Refined_indexes.fst" = '''
module Attributes.Refined_indexes
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let v_MAX: usize = mk_usize 10

type t_MyArray = | MyArray : t_Array u8 (mk_usize 10) -> t_MyArray

/// Triple dash comment
(** Multiline double star comment Maecenas blandit accumsan feugiat.
    Done vitae ullamcorper est.
    Curabitur id dui eget sem viverra interdum. *)
let mutation_example
      (uuse_generic_update_at: t_MyArray)
      (uuse_specialized_update_at: t_Slice u8)
      (specialized_as_well: Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global)
    : (t_MyArray & t_Slice u8 & Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global) =
  let uuse_generic_update_at:t_MyArray =
    Rust_primitives.Hax.update_at uuse_generic_update_at (mk_usize 2) (mk_u8 0)
  in
  let uuse_specialized_update_at:t_Slice u8 =
    Rust_primitives.Hax.Monomorphized_update_at.update_at_usize uuse_specialized_update_at
      (mk_usize 2)
      (mk_u8 0)
  in
  let specialized_as_well:Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global =
    Rust_primitives.Hax.Monomorphized_update_at.update_at_usize specialized_as_well
      (mk_usize 2)
      (mk_u8 0)
  in
  uuse_generic_update_at, uuse_specialized_update_at, specialized_as_well
  <:
  (t_MyArray & t_Slice u8 & Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global)

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl: Core.Ops.Index.t_Index t_MyArray usize =
  {
    f_Output = u8;
    f_index_pre = (fun (self_: t_MyArray) (index: usize) -> index <. v_MAX);
    f_index_post = (fun (self: t_MyArray) (index: usize) (out: u8) -> true);
    f_index = fun (self: t_MyArray) (index: usize) -> self.[ index ]
  }
'''
"Attributes.Refinement_types.fst" = '''
module Attributes.Refinement_types
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let t_BoundedU8 (v_MIN v_MAX: u8) = x: u8{x >=. v_MIN && x <=. v_MAX}

let bounded_u8 (x: t_BoundedU8 (mk_u8 12) (mk_u8 15)) (y: t_BoundedU8 (mk_u8 10) (mk_u8 11))
    : t_BoundedU8 (mk_u8 1) (mk_u8 23) = (x <: u8) +! (y <: u8) <: t_BoundedU8 (mk_u8 1) (mk_u8 23)

/// Even `u8` numbers. Constructing pub Even values triggers static
/// proofs in the extraction.
let t_Even = x: u8{(x %! mk_u8 2 <: u8) =. mk_u8 0}

let double (x: u8) : Prims.Pure t_Even (requires x <. mk_u8 127) (fun _ -> Prims.l_True) =
  x +! x <: t_Even

let double_refine (x: u8) : Prims.Pure t_Even (requires x <. mk_u8 127) (fun _ -> Prims.l_True) =
  x +! x <: t_Even

/// A string that contains no space.
let t_NoE =
  x:
  Alloc.String.t_String
    { let _, out:(Core.Str.Iter.t_Chars & bool) =
        Core.Iter.Traits.Iterator.f_any #Core.Str.Iter.t_Chars
          #FStar.Tactics.Typeclasses.solve
          (Core.Str.impl_str__chars (Core.Ops.Deref.f_deref #Alloc.String.t_String
                  #FStar.Tactics.Typeclasses.solve
                  x
                <:
                string)
            <:
            Core.Str.Iter.t_Chars)
          (fun ch ->
              let ch:char = ch in
              ch =. ' ' <: bool)
      in
      ~.out }

/// A modular mutliplicative inverse
let t_ModInverse (v_MOD: u32) =
  n:
  u32
    { (((cast (n <: u32) <: u128) *! (cast (v_MOD <: u32) <: u128) <: u128) %!
        (cast (v_MOD <: u32) <: u128)
        <:
        u128) =.
      mk_u128 1 }

/// A field element
let t_FieldElement = x: u16{x <=. mk_u16 2347}

/// Example of a specific constraint on a value
let t_CompressionFactor = x: u8{x =. mk_u8 4 || x =. mk_u8 5 || x =. mk_u8 10 || x =. mk_u8 11}
'''
"Attributes.Replace_body.fst" = '''
module Attributes.Replace_body
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let f (x y: u8) : u8 = magic x

type t_Foo = | Foo : t_Foo

let impl_Foo__assoc_fn (self: t_Foo) (x: u8) : Prims.unit = (magic (self <: t_Foo)) x

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl_1: Alloc.String.t_ToString t_Foo =
  {
    f_to_string_pre = (fun (self: t_Foo) -> true);
    f_to_string_post = (fun (self: t_Foo) (out: Alloc.String.t_String) -> true);
    f_to_string = fun (self: t_Foo) -> "The type was t_Foo"
  }
'''
"Attributes.Requires_mut.fst" = '''
module Attributes.Requires_mut
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

class t_Foo (v_Self: Type0) = {
  f_f_pre:x: u8 -> y: u8
    -> pred:
      Type0
        { ((Rust_primitives.Hax.Int.from_machine x <: Hax_lib.Int.t_Int) +
            (Rust_primitives.Hax.Int.from_machine y <: Hax_lib.Int.t_Int)
            <:
            Hax_lib.Int.t_Int) <
          (254 <: Hax_lib.Int.t_Int) ==>
          pred };
  f_f_post:x: u8 -> y: u8 -> x1: (u8 & u8)
    -> pred:
      Type0
        { pred ==>
          (let y_future, output_variable:(u8 & u8) = x1 in
            output_variable =. y_future) };
  f_f:x0: u8 -> x1: u8 -> Prims.Pure (u8 & u8) (f_f_pre x0 x1) (fun result -> f_f_post x0 x1 result);
  f_g_pre:u8 -> u8 -> Type0;
  f_g_post:u8 -> u8 -> u8 -> Type0;
  f_g:x0: u8 -> x1: u8 -> Prims.Pure u8 (f_g_pre x0 x1) (fun result -> f_g_post x0 x1 result);
  f_h_pre:u8 -> u8 -> Type0;
  f_h_post:u8 -> u8 -> Prims.unit -> Type0;
  f_h:x0: u8 -> x1: u8
    -> Prims.Pure Prims.unit (f_h_pre x0 x1) (fun result -> f_h_post x0 x1 result);
  f_i_pre:u8 -> u8 -> Type0;
  f_i_post:u8 -> u8 -> u8 -> Type0;
  f_i:x0: u8 -> x1: u8 -> Prims.Pure u8 (f_i_pre x0 x1) (fun result -> f_i_post x0 x1 result)
}

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl: t_Foo Prims.unit =
  {
    f_f_pre
    =
    (fun (x: u8) (y: u8) ->
        ((Rust_primitives.Hax.Int.from_machine x <: Hax_lib.Int.t_Int) +
          (Rust_primitives.Hax.Int.from_machine y <: Hax_lib.Int.t_Int)
          <:
          Hax_lib.Int.t_Int) <
        (254 <: Hax_lib.Int.t_Int));
    f_f_post
    =
    (fun (x: u8) (y: u8) (y_future, output_variable: (u8 & u8)) -> output_variable =. y_future);
    f_f
    =
    (fun (x: u8) (y: u8) ->
        let y:u8 = y +! x in
        let hax_temp_output:u8 = y in
        y, hax_temp_output <: (u8 & u8));
    f_g_pre = (fun (x: u8) (y: u8) -> true);
    f_g_post = (fun (x: u8) (y: u8) (output_variable: u8) -> output_variable =. y);
    f_g = (fun (x: u8) (y: u8) -> y);
    f_h_pre = (fun (x: u8) (y: u8) -> true);
    f_h_post
    =
    (fun (x: u8) (y: u8) (output_variable: Prims.unit) -> output_variable =. (() <: Prims.unit));
    f_h = (fun (x: u8) (y: u8) -> () <: Prims.unit);
    f_i_pre = (fun (x: u8) (y: u8) -> true);
    f_i_post = (fun (x: u8) (y: u8) (y_future: u8) -> y_future =. y);
    f_i
    =
    fun (x: u8) (y: u8) ->
      let _:Prims.unit = () <: Prims.unit in
      y
  }
'''
"Attributes.Verifcation_status.fst" = '''
module Attributes.Verifcation_status
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

#push-options "--admit_smt_queries true"

let a_function_which_only_laxes (_: Prims.unit) : Prims.unit = Hax_lib.v_assert false

#pop-options

let a_panicfree_function (_: Prims.unit)
    : Prims.Pure u8
      Prims.l_True
      (ensures
        fun x ->
          let x:u8 = x in
          false) =
  let a:u8 = mk_u8 3 in
  let b:u8 = mk_u8 6 in
  let result:u8 = a +! b in
  let _:Prims.unit = admit () (* Panic freedom *) in
  result

let another_panicfree_function (_: Prims.unit)
    : Prims.Pure Prims.unit
      Prims.l_True
      (ensures
        fun x ->
          let x:Prims.unit = x in
          false) =
  let not_much:i32 = mk_i32 0 in
  let nothing:i32 = mk_i32 0 in
  let still_not_much:i32 = not_much +! nothing in
  admit () (* Panic freedom *)
'''
"Attributes.fst" = '''
module Attributes
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let u32_max: u32 = mk_u32 90000

/// A doc comment on `add3`
///another doc comment on add3
let add3 (x y z: u32)
    : Prims.Pure u32
      (requires
        x >. mk_u32 10 && y >. mk_u32 10 && z >. mk_u32 10 &&
        ((x +! y <: u32) +! z <: u32) <. u32_max)
      (ensures
        fun result ->
          let result:u32 = result in
          b2t true ==> b2t (result >. mk_u32 32 <: bool)) = (x +! y <: u32) +! z

let swap_and_mut_req_ens (x y: u32)
    : Prims.Pure (u32 & u32 & u32)
      (requires x <. mk_u32 40 && y <. mk_u32 300)
      (ensures
        fun temp_0_ ->
          let x_future, y_future, result:(u32 & u32 & u32) = temp_0_ in
          x_future =. y && y_future =. x && result =. (x +! y <: u32)) =
  let x0:u32 = x in
  let x:u32 = y in
  let y:u32 = x0 in
  let hax_temp_output:u32 = x +! y in
  x, y, hax_temp_output <: (u32 & u32 & u32)

let issue_844_ (e_x: u8)
    : Prims.Pure u8
      Prims.l_True
      (ensures
        fun e_x_future ->
          let e_x_future:u8 = e_x_future in
          true) = e_x

let add3_lemma (x: u32)
    : Lemma Prims.l_True
      (ensures
        x <=. mk_u32 10 || x >=. (u32_max /! mk_u32 3 <: u32) ||
        (add3 x x x <: u32) =. (x *! mk_u32 3 <: u32)) = ()

type t_Foo = {
  f_x:u32;
  f_y:f_y: u32{b2t (f_y >. mk_u32 3 <: bool)};
  f_z:f_z: u32{b2t (((f_y +! f_x <: u32) +! f_z <: u32) >. mk_u32 3 <: bool)}
}

let inlined_code__v_V: u8 = mk_u8 12

let before_inlined_code = "example before"

let inlined_code (foo: t_Foo) : Prims.unit =
  let vv_a:i32 = mk_i32 13 in
  let _:Prims.unit =
    let x = foo.f_x in
    let { f_y = y } = foo in
    add3 ((fun _ -> 3ul) foo) vv_a inlined_code__v_V y
  in
  ()

let inlined_code_after = "example after"

let before_1 = "example before 1"

let before_2 = "example before 2"

let before_3 = "example before 3"

let mutliple_before_after (_: Prims.unit) : Prims.unit = ()

let after 1 = "example after 1"

let after 2 = "example after 2"

let after 3 = "example after 3"

unfold let some_function _ = "hello from F*"
'''
