---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: coq
  info:
    name: literals
    manifest: literals/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: true
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0
stderr = 'Finished `dev` profile [unoptimized + debuginfo] target(s) in XXs'

[stdout]
diagnostics = []

[stdout.files]
"Literals.v" = '''
(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.



(* NotImplementedYet *)

From Literals Require Import hax_lib.
Export hax_lib.

Definition math_integers (x : t_Int) `{andb (f_gt (x) (impl_Int__e_unsafe_from_str ("0"%string))) (f_lt (x) (impl_Int__e_unsafe_from_str ("16"%string))) = true} : t_u8 :=
  let _ : t_Int := f_lift (3) in
  let _ := f_gt (impl_Int__e_unsafe_from_str ("-340282366920938463463374607431768211455000"%string)) (impl_Int__e_unsafe_from_str ("340282366920938463463374607431768211455000"%string)) in
  let _ := f_lt (x) (x) in
  let _ := f_ge (x) (x) in
  let _ := f_le (x) (x) in
  let _ := f_ne (x) (x) in
  let _ := f_eq (x) (x) in
  let _ := f_add (x) (x) in
  let _ := f_sub (x) (x) in
  let _ := f_mul (x) (x) in
  let _ := f_div (x) (x) in
  let _ : t_i16 := impl_Int__to_i16 (x) in
  let _ : t_i32 := impl_Int__to_i32 (x) in
  let _ : t_i64 := impl_Int__to_i64 (x) in
  let _ : t_i128 := impl_Int__to_i128 (x) in
  let _ : t_isize := impl_Int__to_isize (x) in
  let _ : t_u16 := impl_Int__to_u16 (x) in
  let _ : t_u32 := impl_Int__to_u32 (x) in
  let _ : t_u64 := impl_Int__to_u64 (x) in
  let _ : t_u128 := impl_Int__to_u128 (x) in
  let _ : t_usize := impl_Int__to_usize (x) in
  impl_Int__to_u8 (f_add (x) (f_mul (x) (x))).

Definition panic_with_msg (_ : unit) : unit :=
  never_to_any (panic_fmt (impl_2__new_const (["with msg"%string]))).

Record t_Foo : Type :=
  {
    Foo_f_field : t_u8;
  }.
Arguments Build_t_Foo.
Arguments Foo_f_field.
#[export] Instance settable_t_Foo : Settable _ :=
  settable! (Build_t_Foo) <Foo_f_field>.







Definition v_CONSTANT : t_Foo :=
  Build_t_Foo ((3 : t_u8)).

Definition numeric (_ : unit) : unit :=
  let _ : t_usize := 123 in
  let _ : t_isize := -42 in
  let _ : t_isize := 42 in
  let _ : t_i32 := -42 in
  let _ : t_u128 := 22222222222222222222 in
  tt.

Definition patterns '(_ : unit) : unit :=
  let _ := match (1 : t_u8) with
  | 2 =>
    tt
  | _ =>
    tt
  end in
  let _ := match ("hello"%string,(123,["a"%string; "b"%string])) with
  | ("hello"%string,(123,e_todo)) =>
    tt
  | _ =>
    tt
  end in
  let _ := match Build_t_Foo ((4 : t_u8)) with
  | Build_t_Foo (3) =>
    tt
  | _ =>
    tt
  end in
  tt.

Definition casts (x8 : t_u8) (x16 : t_u16) (x32 : t_u32) (x64 : t_u64) (xs : t_usize) : unit :=
  let _ : t_u64 := f_add (f_add (f_add (f_add (cast (x8)) (cast (x16))) (cast (x32))) (x64)) (cast (xs)) in
  let _ : t_u32 := f_add (f_add (f_add (f_add (cast (x8)) (cast (x16))) (x32)) (cast (x64))) (cast (xs)) in
  let _ : t_u16 := f_add (f_add (f_add (f_add (cast (x8)) (x16)) (cast (x32))) (cast (x64))) (cast (xs)) in
  let _ : t_u8 := f_add (f_add (f_add (f_add (x8) (cast (x16))) (cast (x32))) (cast (x64))) (cast (xs)) in
  let _ : t_i64 := f_add (f_add (f_add (f_add (cast (x8)) (cast (x16))) (cast (x32))) (cast (x64))) (cast (xs)) in
  let _ : t_i32 := f_add (f_add (f_add (f_add (cast (x8)) (cast (x16))) (cast (x32))) (cast (x64))) (cast (xs)) in
  let _ : t_i16 := f_add (f_add (f_add (f_add (cast (x8)) (cast (x16))) (cast (x32))) (cast (x64))) (cast (xs)) in
  let _ : t_i8 := f_add (f_add (f_add (f_add (cast (x8)) (cast (x16))) (cast (x32))) (cast (x64))) (cast (xs)) in
  tt.

Definition empty_array '(_ : unit) : unit :=
  let _ : t_Slice t_u8 := unsize ([]) in
  tt.

Definition fn_pointer_cast (_ : unit) : unit :=
  let f : t_u32 -> t_u32 := fun x =>
    x in
  tt.

Definition null : ascii :=
  "\000"%char.
'''
_CoqProject = '''
-R ./ TODO
-arg -w
-arg all

Literals.v'''
